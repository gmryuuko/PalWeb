@page "/players"
@using Web.Services

@implements IDisposable

@inject PalService PalService
@inject ClipboardService ClipboardService
@inject ISnackbar Snackbar

<PageTitle>Players</PageTitle>

<MudContainer>
    <MudText Typo="Typo.h3" GutterBottom="true">Players</MudText>
    <MudTable Items="PalService.Players" Hover="true" SortLabel="Sort By">
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<PlayerInfo, object>(x => x.Name)">Name</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<PlayerInfo, object>(x => x.AccountName)">AccountName
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<PlayerInfo, object>(x => x.PlayerId)">PlayerId
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<PlayerInfo, object>(x => x.UserId)">UserId</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<PlayerInfo, object>(x => x.Level)">Level</MudTableSortLabel>
            </MudTh>
            <MudTh></MudTh>
            <MudTh></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.AccountName</MudTd>
            <MudTd>@context.PlayerId</MudTd>
            <MudTd>@context.UserId</MudTd>
            <MudTd>@context.Level</MudTd>
            <MudTd>
                <MudButton Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled"
                           OnClick="() => CopyTpTo(context)">
                    TP To
                </MudButton>
            </MudTd>
            <MudTd>
                <MudButton Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled"
                           OnClick="() => CopyTpToMe(context)">
                    TP To Me
                </MudButton>
            </MudTd>
            <MudTd>
                <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Error">
                    <MudMenuItem OnClick="async () => { await KickPlayer(context); }">Kick</MudMenuItem>
                    <MudMenuItem OnClick="async () => { await BanPlayer(context); }">Ban</MudMenuItem>
                </MudMenu>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {

    private Action? _onChangeHandler;

    protected override void OnInitialized()
    {
        _onChangeHandler = async void () =>
        {
            try
            {
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception e)
            {
                // do nothing
            }
        };
        PalService.OnChangePlayers += _onChangeHandler;
        base.OnInitialized();
    }

    private async Task KickPlayer(PlayerInfo context)
    {
        try
        {
            await PalService.KickPlayerAsync(context.UserId);
            Snackbar.Add("Player kicked", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    private async Task BanPlayer(PlayerInfo context)
    {
        try
        {
            await PalService.BanPlayerAsync(context.UserId);
            Snackbar.Add("Player kicked", Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    private async Task CopyTpTo(PlayerInfo context)
    {
        await ClipboardService.CopyToClipboardAsync($"/TeleportToPlayer {context.UserId}");
    }

    private async Task CopyTpToMe(PlayerInfo context)
    {
        await ClipboardService.CopyToClipboardAsync($"/TeleportToMe  {context.UserId}");
    }

    public void Dispose()
    {
        if (_onChangeHandler != null)
        {
            PalService.OnChangePlayers -= _onChangeHandler;
        }
    }

}