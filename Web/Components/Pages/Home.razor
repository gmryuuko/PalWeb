@page "/"
@using Web.Services

@inject PalService PalService
@inject ISnackbar Snackbar

<PageTitle>Home</PageTitle>

@if (_serverInfo == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudContainer>
        <MudText Typo="Typo.h3" GutterBottom="true">Server Info</MudText>
        <MudText Typo="Typo.body1">Name: @_serverInfo?.ServerName</MudText>
        <MudText Typo="Typo.body1">Description: @_serverInfo?.Description</MudText>
        <MudText Typo="Typo.body1">Version: @_serverInfo?.Version</MudText>
        <MudText Typo="Typo.body1">World Guid: @_serverInfo?.WorldGuid</MudText>
        <MudText Typo="Typo.body1">Player Num: @_serverMetrics?.CurrentPlayerNum/@_serverMetrics?.MaxPlayerNum</MudText>
        <MudText Typo="Typo.body1">Server FPS: @_serverMetrics?.ServerFps</MudText>
        <MudText Typo="Typo.body1">Server Frame Time: @_serverMetrics?.ServerFrameTime</MudText>
        <MudText Typo="Typo.body1">Days: @_serverMetrics?.Days</MudText>
        <MudText Typo="Typo.body1">Up Time: @FormatUptime(_serverMetrics?.Uptime)</MudText>
    </MudContainer>
}

@code
{
    private PalServerInfo? _serverInfo;
    private PalServerMetrics? _serverMetrics;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _serverInfo = await PalService.GetServerInfoAsync();
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }

        try
        {
            _serverMetrics = await PalService.GetServerMetricsAsync();
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    private static string FormatUptime(double? uptimeSeconds)
    {
        if (uptimeSeconds == null)
        {
            return "N/A";
        }

        var uptime = TimeSpan.FromSeconds(uptimeSeconds.Value);

        return $"{uptime.Days}d {uptime.Hours}h {uptime.Minutes}m {uptime.Seconds}s";
    }
}
